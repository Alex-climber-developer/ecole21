/*  DO NOT EDIT THIS FILE.

    It has been auto-edited by fixincludes from:

        "/src/decimal.h"

    This had to be done to correct non-standard usages in the
    original, manufacturer supplied header file.  */

//          - Библиотека должна быть разработана на языке Си стандарта C11 с
//          использованием компиятора gcc

//          - Код библиотеки должен находиться в папке src в ветке develop

//          - Не использовать устаревшие и выведенные из употребления
//          конструкции языка и библиотечные функции. Обращать внимания на
//          пометки legacy и obsolete в официальной документации по языку и
//          используемым библиотекам. Ориентироваться на стандарт POSIX.1-2017

//          - При написании кода необходимо придерживаться Google Style

//          - Оформить решение как статическую библиотеку (с заголовочным файлом
//          s21_decimal.h)

//          - Библиотека должна быть разработана в соответствии с принципами
//          структурного программирования

//          - Перед каждой функцией использовать префикс s21_

//          - Подготовить полное покрытие unit-тестами функций библиотеки c
//          помощью библиотеки Check

//          - Unit-тесты должны покрывать не менее 80% каждой функции

//          - Предусмотреть Makefile для сборки библиотеки и тестов (с целями
//          all, clean, test, s21_decimal.a, gcov_report)

//          - В цели gcov_report должен формироваться отчёт gcov в виде html
//          страницы. Для этого unit-тесты должны запускаться с флагами gcov

//          - При реализации decimal ориентироваться на [двоичное
//          представление](#двоичное-представление) с целочисленным массивом
//          `bits`, как указано в [примере выше](#пример). Соблюсти положение
//          разрядов числа в массиве `bits`

//          - Запрещено использование типа __int128

//          - Конечные нули можно как оставлять, так и удалять (за исключением
//          функции `s21_truncate`)

//          - Определяемый тип должен поддерживать числа от

//          -79,228,162,514,264,337,593,543,950,335 до
//          +79,228,162,514,264,337,593,543,950,335.

#ifndef SRC_S21_DECIMAL_H
#define SRC_S21_DECIMAL_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
enum STATUS { OK, INF_r, INF_l, NAN, DOP_CODE };
typedef struct {
  unsigned int bits[4];
  enum STATUS;
} s21_decimal;

//* | Преобразователи |                 //TODO: IN THE END - EVERYONE
int s21_from_int_to_decimal(int src, s21_decimal *dst);      //| Из int |
int s21_from_float_to_decimal(float src, s21_decimal *dst);  // | Из float  |
int s21_from_decimal_to_int(s21_decimal src, int *dst);      // | В int  |
int s21_from_decimal_to_float(s21_decimal src, float *dst);  // | В float  |
//  - 0 - OK
//  - 1 - ошибка конвертации

//* | Операторы сравнение |                 //TODO: RUSLAN
int s21_is_less(s21_decimal, s21_decimal);  // | Меньше  | < |
int s21_is_less_or_equal(s21_decimal,
                         s21_decimal);  // | Меньше или равно | <= |
int s21_is_greater(s21_decimal, s21_decimal);  // | Больше | \> |
int s21_is_greater_or_equal(s21_decimal,
                            s21_decimal);  // | Больше или равно | \>= |
int s21_is_equal(s21_decimal, s21_decimal);      // | Равно | == |
int s21_is_not_equal(s21_decimal, s21_decimal);  // | Не равно | != |
//  - 0 - FALSE
//  - 1 - TRUE

//* | Преобразователи |                 //TODO: MARK
int s21_floor(s21_decimal value,
              s21_decimal *result);  // | Округляет указанное Decimal число до
                                     // ближайшего целого числа в сторону
                                     // отрицательной бесконечности. |
int s21_round(
    s21_decimal value,
    s21_decimal *result);  // | Округляет Decimal до ближайшего целого числа.|
int s21_truncate(s21_decimal value,
                 s21_decimal *result);  //     | Возвращает целые цифры
                                        //     указанного Decimal числа;
                                        // любые дробные цифры отбрасываются,
                                        // включая конечные нули.|
int s21_negate(s21_decimal value,
               s21_decimal *result);  // | Возвращает результат умножения
                                      // указанного Decimal на - 1. |
//  - 0 - OK
//  - 1 - ошибка вычисления

//* | Арифметические операторы |                 //TODO: SANYA
int s21_add(s21_decimal value_1, s21_decimal value_2,
            s21_decimal *result);  //| Сложение | + |
int s21_sub(s21_decimal value_1, s21_decimal value_2,
            s21_decimal *result);  // | Вычитание | - |
int s21_mul(s21_decimal value_1, s21_decimal value_2,
            s21_decimal *result);  // | Умножение | * |
int s21_div(s21_decimal value_1, s21_decimal value_2,
            s21_decimal *result);  // | Деление | / |
int s21_mod(s21_decimal value_1, s21_decimal value_2,
            s21_decimal *result);  // | Остаток от деления | Mod |
// - 0 - OK
// - 1 - число слишком велико или равно бесконечности
// - 2 - число слишком мало или равно отрицательной бесконечности
// - 3 - деление на 0
char *str_mul(char *a, char *b);
char *str_add(char *a, char *b, char *result);
#endif  // SRC_S21_DECIMAL_H
